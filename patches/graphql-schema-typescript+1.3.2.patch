diff --git a/node_modules/graphql-schema-typescript/lib/cli.js b/node_modules/graphql-schema-typescript/lib/cli.js
index 9fdd277..c43890d 100644
--- a/node_modules/graphql-schema-typescript/lib/cli.js
+++ b/node_modules/graphql-schema-typescript/lib/cli.js
@@ -1,10 +1,11 @@
 #!/usr/bin/env node
 "use strict";
 var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
     return new (P || (P = Promise))(function (resolve, reject) {
         function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
         function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
@@ -35,7 +36,6 @@ var __generator = (this && this.__generator) || function (thisArg, body) {
         if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
     }
 };
-var _this = this;
 Object.defineProperty(exports, "__esModule", { value: true });
 var yargs = require("yargs");
 var path = require("path");
@@ -128,7 +128,7 @@ yargs
     normalize: true,
     coerce: path.resolve
 })
-    .command('generate-ts <folderPath>', 'Generate typescript definitions from a local folder that cointains `.graphql` type definitions', {}, function (argv) { return __awaiter(_this, void 0, void 0, function () {
+    .command('generate-ts <folderPath>', 'Generate typescript definitions from a local folder that cointains `.graphql` type definitions', {}, function (argv) { return __awaiter(void 0, void 0, void 0, function () {
     var folderPath, output, options;
     return __generator(this, function (_a) {
         switch (_a.label) {
diff --git a/node_modules/graphql-schema-typescript/lib/index.d.ts b/node_modules/graphql-schema-typescript/lib/index.d.ts
index 4cc07df..0bb6e13 100644
--- a/node_modules/graphql-schema-typescript/lib/index.d.ts
+++ b/node_modules/graphql-schema-typescript/lib/index.d.ts
@@ -1,6 +1,6 @@
 import { GraphQLSchema } from 'graphql';
 import { GenerateTypescriptOptions } from './types';
 export { GenerateTypescriptOptions } from './types';
-export declare const generateTSTypesAsString: (schema: string | GraphQLSchema, outputPath: string, options: GenerateTypescriptOptions) => Promise<string>;
+export declare const generateTSTypesAsString: (schema: GraphQLSchema | string, outputPath: string, options: GenerateTypescriptOptions) => Promise<string>;
 export declare function generateTypeScriptTypes(schema: GraphQLSchema | string, outputPath: string, options?: GenerateTypescriptOptions): Promise<void>;
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/graphql-schema-typescript/lib/index.d.ts.map b/node_modules/graphql-schema-typescript/lib/index.d.ts.map
index 04d157b..116fa8c 100644
--- a/node_modules/graphql-schema-typescript/lib/index.d.ts.map
+++ b/node_modules/graphql-schema-typescript/lib/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAe,MAAM,SAAS,CAAC;AACrD,OAAO,EAAE,yBAAyB,EAAkB,MAAM,SAAS,CAAC;AAOpE,OAAO,EAAE,yBAAyB,EAAE,MAAM,SAAS,CAAC;AA4BpD,eAAO,MAAM,uBAAuB,6GAsEnC,CAAC;AAEF,gDACI,MAAM,EAAE,aAAa,GAAG,MAAM,EAC9B,UAAU,EAAE,MAAM,EAClB,OAAO,GAAE,yBAA0C,iBAItD"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAe,MAAM,SAAS,CAAC;AACrD,OAAO,EAAE,yBAAyB,EAAkB,MAAM,SAAS,CAAC;AAOpE,OAAO,EAAE,yBAAyB,EAAE,MAAM,SAAS,CAAC;AA4BpD,eAAO,MAAM,uBAAuB,WACxB,aAAa,GAAG,MAAM,cAClB,MAAM,WACT,yBAAyB,KACnC,OAAO,CAAC,MAAM,CAkEhB,CAAC;AAEF,wBAAsB,uBAAuB,CACzC,MAAM,EAAE,aAAa,GAAG,MAAM,EAC9B,UAAU,EAAE,MAAM,EAClB,OAAO,GAAE,yBAA0C,iBAItD"}
\ No newline at end of file
diff --git a/node_modules/graphql-schema-typescript/lib/index.js b/node_modules/graphql-schema-typescript/lib/index.js
index ca47440..a67bcb3 100644
--- a/node_modules/graphql-schema-typescript/lib/index.js
+++ b/node_modules/graphql-schema-typescript/lib/index.js
@@ -1,17 +1,21 @@
 "use strict";
-var __assign = (this && this.__assign) || Object.assign || function(t) {
-    for (var s, i = 1, n = arguments.length; i < n; i++) {
-        s = arguments[i];
-        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
-            t[p] = s[p];
-    }
-    return t;
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
 };
 var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
     return new (P || (P = Promise))(function (resolve, reject) {
         function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
         function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
@@ -42,8 +46,15 @@ var __generator = (this && this.__generator) || function (thisArg, body) {
         if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
     }
 };
-var _this = this;
+var __spreadArrays = (this && this.__spreadArrays) || function () {
+    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
+    for (var r = Array(s), k = 0, i = 0; i < il; i++)
+        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
+            r[k] = a[j];
+    return r;
+};
 Object.defineProperty(exports, "__esModule", { value: true });
+exports.generateTypeScriptTypes = exports.generateTSTypesAsString = void 0;
 var fs = require("fs");
 var path = require("path");
 var graphql_1 = require("graphql");
@@ -68,12 +79,12 @@ var typeResolversDecoration = [
     ' *                               *',
     ' *********************************/'
 ];
-exports.generateTSTypesAsString = function (schema, outputPath, options) { return __awaiter(_this, void 0, void 0, function () {
+exports.generateTSTypesAsString = function (schema, outputPath, options) { return __awaiter(void 0, void 0, void 0, function () {
     var mergedOptions, introspectResult, schemaPath, exists, _a, schemaViaStr, tsGenerator, typeDefs, typeResolvers, tsResolverGenerator, header, body, formatted;
     return __generator(this, function (_b) {
         switch (_b.label) {
             case 0:
-                mergedOptions = __assign({}, types_1.defaultOptions, options);
+                mergedOptions = __assign(__assign({}, types_1.defaultOptions), options);
                 if (!util_1.isString(schema)) return [3 /*break*/, 8];
                 _b.label = 1;
             case 1:
@@ -114,26 +125,26 @@ exports.generateTSTypesAsString = function (schema, outputPath, options) { retur
                 return [4 /*yield*/, tsResolverGenerator.generate()];
             case 12:
                 typeResolvers = _b.sent();
-                header = typeResolvers.importHeader.concat([jsDoc]);
-                body = typeDefsDecoration.concat(typeDefs, typeResolversDecoration, typeResolvers.body);
+                header = __spreadArrays(typeResolvers.importHeader, [jsDoc]);
+                body = __spreadArrays(typeDefsDecoration, typeDefs, typeResolversDecoration, typeResolvers.body);
                 if (mergedOptions.namespace) {
-                    body = [
+                    body = __spreadArrays([
                         // if namespace is under global, it doesn't need to be declared again
                         (mergedOptions.global ? '' : 'declare ') + "namespace " + options.namespace + " {"
-                    ].concat(body, [
+                    ], body, [
                         '}'
                     ]);
                 }
                 if (mergedOptions.global) {
-                    body = [
+                    body = __spreadArrays([
                         'export { };',
                         '',
                         'declare global {'
-                    ].concat(body, [
+                    ], body, [
                         '}'
                     ]);
                 }
-                formatted = utils_1.formatTabSpace(header.concat(body), mergedOptions.tabSpaces);
+                formatted = utils_1.formatTabSpace(__spreadArrays(header, body), mergedOptions.tabSpaces);
                 return [2 /*return*/, formatted.join('\n')];
         }
     });
diff --git a/node_modules/graphql-schema-typescript/lib/types.js b/node_modules/graphql-schema-typescript/lib/types.js
index 94e88d6..a110837 100644
--- a/node_modules/graphql-schema-typescript/lib/types.js
+++ b/node_modules/graphql-schema-typescript/lib/types.js
@@ -1,5 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
+exports.defaultOptions = void 0;
 exports.defaultOptions = {
     tabSpaces: 2,
     typePrefix: 'GQL',
diff --git a/node_modules/graphql-schema-typescript/lib/typescriptGenerator.d.ts.map b/node_modules/graphql-schema-typescript/lib/typescriptGenerator.d.ts.map
index 5c918fe..d3ffef5 100644
--- a/node_modules/graphql-schema-typescript/lib/typescriptGenerator.d.ts.map
+++ b/node_modules/graphql-schema-typescript/lib/typescriptGenerator.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"typescriptGenerator.d.ts","sourceRoot":"","sources":["../src/typescriptGenerator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,SAAS,CAAC;AAQpD,OAAO,EAQH,kBAAkB,EAGrB,MAAM,SAAS,CAAC;AAEjB;IAGQ,SAAS,CAAC,OAAO,EAAE,yBAAyB;IAC5C,SAAS,CAAC,gBAAgB,EAAE,kBAAkB;IAC9C,SAAS,CAAC,UAAU,EAAE,MAAM;gBAFlB,OAAO,EAAE,yBAAyB,EAClC,gBAAgB,EAAE,kBAAkB,EACpC,UAAU,EAAE,MAAM;IAGnB,QAAQ,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAgD1C,OAAO,CAAC,wBAAwB;IAShC,OAAO,CAAC,qBAAqB;IAK7B,OAAO,CAAC,gBAAgB;IA6CxB,OAAO,CAAC,qBAAqB;IAQ7B,OAAO,CAAC,kBAAkB;IA4E1B,OAAO,CAAC,iBAAiB;IAmCzB;;;;;;;OAOG;IACH,OAAO,CAAC,eAAe;CAgB1B"}
\ No newline at end of file
+{"version":3,"file":"typescriptGenerator.d.ts","sourceRoot":"","sources":["../src/typescriptGenerator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,SAAS,CAAC;AAQpD,OAAO,EAQH,kBAAkB,EAGrB,MAAM,SAAS,CAAC;AAEjB,qBAAa,mBAAmB;IAGxB,SAAS,CAAC,OAAO,EAAE,yBAAyB;IAC5C,SAAS,CAAC,gBAAgB,EAAE,kBAAkB;IAC9C,SAAS,CAAC,UAAU,EAAE,MAAM;gBAFlB,OAAO,EAAE,yBAAyB,EAClC,gBAAgB,EAAE,kBAAkB,EACpC,UAAU,EAAE,MAAM;IAGnB,QAAQ,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAgD1C,OAAO,CAAC,wBAAwB;IAShC,OAAO,CAAC,qBAAqB;IAK7B,OAAO,CAAC,gBAAgB;IA6CxB,OAAO,CAAC,qBAAqB;IAQ7B,OAAO,CAAC,kBAAkB;IA4E1B,OAAO,CAAC,iBAAiB;IAmCzB;;;;;;;OAOG;IACH,OAAO,CAAC,eAAe;CAgB1B"}
\ No newline at end of file
diff --git a/node_modules/graphql-schema-typescript/lib/typescriptGenerator.js b/node_modules/graphql-schema-typescript/lib/typescriptGenerator.js
index 14fe58b..44c562e 100644
--- a/node_modules/graphql-schema-typescript/lib/typescriptGenerator.js
+++ b/node_modules/graphql-schema-typescript/lib/typescriptGenerator.js
@@ -1,9 +1,10 @@
 "use strict";
 var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
     return new (P || (P = Promise))(function (resolve, reject) {
         function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
         function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
@@ -34,7 +35,15 @@ var __generator = (this && this.__generator) || function (thisArg, body) {
         if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
     }
 };
+var __spreadArrays = (this && this.__spreadArrays) || function () {
+    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
+    for (var r = Array(s), k = 0, i = 0; i < il; i++)
+        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
+            r[k] = a[j];
+    return r;
+};
 Object.defineProperty(exports, "__esModule", { value: true });
+exports.TypeScriptGenerator = void 0;
 var typescript_1 = require("typescript");
 var utils_1 = require("./utils");
 var TypeScriptGenerator = /** @class */ (function () {
@@ -106,13 +115,13 @@ var TypeScriptGenerator = /** @class */ (function () {
             var graphQlEnumValueName = enumValue.name;
             var typescriptEnumValueName = _this.generateEnumValueName(graphQlEnumValueName);
             if (!isLastEnum) {
-                typescriptDefs = enumValueJsDoc.concat([typescriptEnumValueName + " = '" + graphQlEnumValueName + "',"]);
+                typescriptDefs = __spreadArrays(enumValueJsDoc, [typescriptEnumValueName + " = '" + graphQlEnumValueName + "',"]);
             }
             else {
-                typescriptDefs = enumValueJsDoc.concat([typescriptEnumValueName + " = '" + graphQlEnumValueName + "'"]);
+                typescriptDefs = __spreadArrays(enumValueJsDoc, [typescriptEnumValueName + " = '" + graphQlEnumValueName + "'"]);
             }
             if (enumValueJsDoc.length > 0) {
-                typescriptDefs = [''].concat(typescriptDefs);
+                typescriptDefs = __spreadArrays([''], typescriptDefs);
             }
             return prevTypescriptDefs.concat(typescriptDefs);
         }, []);
@@ -122,9 +131,9 @@ var TypeScriptGenerator = /** @class */ (function () {
             || !!this.options.namespace
             || this.outputPath.endsWith('.d.ts');
         var enumModifier = isGeneratingDeclaration ? ' const ' : ' ';
-        return [
+        return __spreadArrays([
             "export" + enumModifier + "enum " + this.options.typePrefix + enumType.name + " {"
-        ].concat(enumBody, [
+        ], enumBody, [
             '}'
         ]);
     };
@@ -153,24 +162,24 @@ var TypeScriptGenerator = /** @class */ (function () {
             var fieldJsDoc = utils_1.descriptionToJSDoc(field);
             var _a = utils_1.createFieldRef(field, _this.options.typePrefix, _this.options.strictNulls), fieldName = _a.fieldName, fieldType = _a.fieldType;
             var fieldNameAndType = fieldName + ": " + fieldType + ";";
-            var typescriptDefs = fieldJsDoc.concat([fieldNameAndType]);
+            var typescriptDefs = __spreadArrays(fieldJsDoc, [fieldNameAndType]);
             if (fieldJsDoc.length > 0) {
-                typescriptDefs = [''].concat(typescriptDefs);
+                typescriptDefs = __spreadArrays([''], typescriptDefs);
             }
             return prevTypescriptDefs.concat(typescriptDefs);
         }, []);
         var possibleTypeNames = [];
         var possibleTypeNamesMap = [];
         if (objectType.kind === 'INTERFACE') {
-            possibleTypeNames.push.apply(possibleTypeNames, [
+            possibleTypeNames.push.apply(possibleTypeNames, __spreadArrays([
                 '',
                 "/** Use this to resolve interface type " + objectType.name + " */"
-            ].concat(this.createUnionType("Possible" + objectType.name + "TypeNames", objectType.possibleTypes.map(function (pt) { return "'" + pt.name + "'"; }))));
-            possibleTypeNamesMap.push.apply(possibleTypeNamesMap, [
+            ], this.createUnionType("Possible" + objectType.name + "TypeNames", objectType.possibleTypes.map(function (pt) { return "'" + pt.name + "'"; }))));
+            possibleTypeNamesMap.push.apply(possibleTypeNamesMap, __spreadArrays([
                 '',
                 "export interface " + this.options.typePrefix + objectType.name + "NameMap {",
                 objectType.name + ": " + this.options.typePrefix + objectType.name + ";"
-            ].concat(objectType.possibleTypes.map(function (pt) {
+            ], objectType.possibleTypes.map(function (pt) {
                 return pt.name + ": " + _this.options.typePrefix + pt.name + ";";
             }), [
                 '}'
@@ -179,24 +188,24 @@ var TypeScriptGenerator = /** @class */ (function () {
         var extendStr = extendTypes.length === 0
             ? ''
             : "extends " + extendTypes.map(function (t) { return _this.options.typePrefix + t; }).join(', ') + " ";
-        return [
+        return __spreadArrays([
             "export interface " + this.options.typePrefix + objectType.name + " " + extendStr + "{"
-        ].concat(objectFields, [
+        ], objectFields, [
             '}'
         ], possibleTypeNames, possibleTypeNamesMap);
     };
     TypeScriptGenerator.prototype.generateUnionType = function (unionType) {
         var _this = this;
         var typePrefix = this.options.typePrefix;
-        var possibleTypesNames = [
+        var possibleTypesNames = __spreadArrays([
             '',
             "/** Use this to resolve union type " + unionType.name + " */"
-        ].concat(this.createUnionType("Possible" + unionType.name + "TypeNames", unionType.possibleTypes.map(function (pt) { return "'" + pt.name + "'"; })));
-        var possibleTypeNamesMap = [
+        ], this.createUnionType("Possible" + unionType.name + "TypeNames", unionType.possibleTypes.map(function (pt) { return "'" + pt.name + "'"; })));
+        var possibleTypeNamesMap = __spreadArrays([
             '',
             "export interface " + this.options.typePrefix + unionType.name + "NameMap {",
             unionType.name + ": " + this.options.typePrefix + unionType.name + ";"
-        ].concat(unionType.possibleTypes.map(function (pt) {
+        ], unionType.possibleTypes.map(function (pt) {
             return pt.name + ": " + _this.options.typePrefix + pt.name + ";";
         }), [
             '}'
@@ -209,7 +218,7 @@ var TypeScriptGenerator = /** @class */ (function () {
                 return typePrefix + type.name;
             }
         }));
-        return unionTypeTSDefs.concat(possibleTypesNames, possibleTypeNamesMap);
+        return __spreadArrays(unionTypeTSDefs, possibleTypesNames, possibleTypeNamesMap);
     };
     /**
      * Create a union type e.g: type Color = 'Red' | 'Green' | 'Blue' | ...
@@ -225,9 +234,9 @@ var TypeScriptGenerator = /** @class */ (function () {
             return [result];
         }
         var _a = result.split('='), firstLine = _a[0], rest = _a[1];
-        return [
+        return __spreadArrays([
             firstLine + '='
-        ].concat(rest
+        ], rest
             .replace(/ \| /g, ' |\n')
             .split('\n')
             .map(function (line) { return line.trim(); }));
diff --git a/node_modules/graphql-schema-typescript/lib/typescriptResolverGenerator.d.ts.map b/node_modules/graphql-schema-typescript/lib/typescriptResolverGenerator.d.ts.map
index 1e7cfca..46987bd 100644
--- a/node_modules/graphql-schema-typescript/lib/typescriptResolverGenerator.d.ts.map
+++ b/node_modules/graphql-schema-typescript/lib/typescriptResolverGenerator.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"typescriptResolverGenerator.d.ts","sourceRoot":"","sources":["../src/typescriptResolverGenerator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,SAAS,CAAC;AAMpD,OAAO,EAKH,yBAAyB,EACzB,kBAAkB,EAErB,MAAM,SAAS,CAAC;AAEjB,MAAM,WAAW,uBAAuB;IACpC,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;CAClB;AAED;IAcQ,SAAS,CAAC,OAAO,EAAE,yBAAyB;IAC5C,SAAS,CAAC,mBAAmB,EAAE,kBAAkB;IAdrD,SAAS,CAAC,YAAY,EAAE,MAAM,EAAE,CAAM;IACtC,SAAS,CAAC,kBAAkB,EAAE,MAAM,EAAE,CAAM;IAC5C,SAAS,CAAC,cAAc,EAAE,MAAM,EAAE,CAAM;IACxC,SAAS,CAAC,cAAc,EAAE;QACtB,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,EAAE,CAAA;KAC3B,CAAM;IACP,SAAS,CAAC,WAAW,EAAE,MAAM,CAAC;IAE9B,SAAS,CAAC,SAAS,CAAC,EAAE,yBAAyB,CAAC;IAChD,SAAS,CAAC,YAAY,CAAC,EAAE,yBAAyB,CAAC;IACnD,SAAS,CAAC,gBAAgB,CAAC,EAAE,yBAAyB,CAAC;gBAGzC,OAAO,EAAE,yBAAyB,EAClC,mBAAmB,EAAE,kBAAkB;IAQxC,QAAQ,IAAI,OAAO,CAAC,uBAAuB,CAAC;IAmEzD,OAAO,CAAC,4BAA4B;IAIpC,OAAO,CAAC,oBAAoB;IAmB5B,OAAO,CAAC,sBAAsB;IA+E9B,OAAO,CAAC,WAAW;IAInB,OAAO,CAAC,YAAY;IAUpB,OAAO,CAAC,YAAY;IAoBpB,OAAO,CAAC,UAAU;CAKrB"}
\ No newline at end of file
+{"version":3,"file":"typescriptResolverGenerator.d.ts","sourceRoot":"","sources":["../src/typescriptResolverGenerator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,SAAS,CAAC;AAMpD,OAAO,EAKH,yBAAyB,EACzB,kBAAkB,EAErB,MAAM,SAAS,CAAC;AAEjB,MAAM,WAAW,uBAAuB;IACpC,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;CAClB;AAED,qBAAa,mBAAmB;IAcxB,SAAS,CAAC,OAAO,EAAE,yBAAyB;IAC5C,SAAS,CAAC,mBAAmB,EAAE,kBAAkB;IAdrD,SAAS,CAAC,YAAY,EAAE,MAAM,EAAE,CAAM;IACtC,SAAS,CAAC,kBAAkB,EAAE,MAAM,EAAE,CAAM;IAC5C,SAAS,CAAC,cAAc,EAAE,MAAM,EAAE,CAAM;IACxC,SAAS,CAAC,cAAc,EAAE;QACtB,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,EAAE,CAAA;KAC3B,CAAM;IACP,SAAS,CAAC,WAAW,EAAE,MAAM,CAAC;IAE9B,SAAS,CAAC,SAAS,CAAC,EAAE,yBAAyB,CAAC;IAChD,SAAS,CAAC,YAAY,CAAC,EAAE,yBAAyB,CAAC;IACnD,SAAS,CAAC,gBAAgB,CAAC,EAAE,yBAAyB,CAAC;gBAGzC,OAAO,EAAE,yBAAyB,EAClC,mBAAmB,EAAE,kBAAkB;IAQxC,QAAQ,IAAI,OAAO,CAAC,uBAAuB,CAAC;IAmEzD,OAAO,CAAC,4BAA4B;IAIpC,OAAO,CAAC,oBAAoB;IAmB5B,OAAO,CAAC,sBAAsB;IA+E9B,OAAO,CAAC,WAAW;IAInB,OAAO,CAAC,YAAY;IAUpB,OAAO,CAAC,YAAY;IAoBpB,OAAO,CAAC,UAAU;CAKrB"}
\ No newline at end of file
diff --git a/node_modules/graphql-schema-typescript/lib/typescriptResolverGenerator.js b/node_modules/graphql-schema-typescript/lib/typescriptResolverGenerator.js
index f1947b0..7f2242a 100644
--- a/node_modules/graphql-schema-typescript/lib/typescriptResolverGenerator.js
+++ b/node_modules/graphql-schema-typescript/lib/typescriptResolverGenerator.js
@@ -1,9 +1,10 @@
 "use strict";
 var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
     return new (P || (P = Promise))(function (resolve, reject) {
         function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
         function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
@@ -34,7 +35,15 @@ var __generator = (this && this.__generator) || function (thisArg, body) {
         if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
     }
 };
+var __spreadArrays = (this && this.__spreadArrays) || function () {
+    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
+    for (var r = Array(s), k = 0, i = 0; i < il; i++)
+        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
+            r[k] = a[j];
+    return r;
+};
 Object.defineProperty(exports, "__esModule", { value: true });
+exports.TSResolverGenerator = void 0;
 var utils_1 = require("./utils");
 var TSResolverGenerator = /** @class */ (function () {
     function TSResolverGenerator(options, introspectionResult) {
@@ -104,7 +113,7 @@ var TSResolverGenerator = /** @class */ (function () {
                 this.resolverObject.push('}');
                 return [2 /*return*/, {
                         importHeader: this.importHeader,
-                        body: this.resolverObject.concat(this.resolverInterfaces, Object.values(this.resolverResult).map(function (v) { return v.join('\n'); }))
+                        body: __spreadArrays(this.resolverObject, this.resolverInterfaces, Object.values(this.resolverResult).map(function (v) { return v.join('\n'); }))
                     }];
             });
         });
@@ -130,9 +139,9 @@ var TSResolverGenerator = /** @class */ (function () {
         ]);
     };
     TSResolverGenerator.prototype.generateObjectResolver = function (objectType, isSubscription) {
+        var _a, _b;
         var _this = this;
         if (isSubscription === void 0) { isSubscription = false; }
-        var _a, _b;
         var typeResolverName = "" + this.options.typePrefix + objectType.name + "TypeResolver";
         var typeResolverBody = [];
         var fieldResolversTypeDefs = [];
@@ -147,9 +156,9 @@ var TSResolverGenerator = /** @class */ (function () {
                     var _a = utils_1.createFieldRef(arg, _this.options.typePrefix, false), fieldName = _a.fieldName, fieldType = _a.fieldType;
                     argsBody_1.push(fieldName + ": " + fieldType + ";");
                 });
-                fieldResolversTypeDefs.push.apply(fieldResolversTypeDefs, [
+                fieldResolversTypeDefs.push.apply(fieldResolversTypeDefs, __spreadArrays([
                     "export interface " + argsType + " {"
-                ].concat(argsBody_1, [
+                ], argsBody_1, [
                     '}'
                 ]));
             }
@@ -185,9 +194,9 @@ var TSResolverGenerator = /** @class */ (function () {
                 "" + field.name + _this.getModifier() + ": " + fieldResolverName + "<TParent>;"
             ]);
         });
-        (_a = this.resolverInterfaces).push.apply(_a, [
+        (_a = this.resolverInterfaces).push.apply(_a, __spreadArrays([
             "export interface " + typeResolverName + "<TParent = " + this.guessTParent(objectType.name) + "> {"
-        ].concat(typeResolverBody, [
+        ], typeResolverBody, [
             '}',
             ''
         ], fieldResolversTypeDefs));
diff --git a/node_modules/graphql-schema-typescript/lib/utils.d.ts.map b/node_modules/graphql-schema-typescript/lib/utils.d.ts.map
index 01dc5d6..ec59761 100644
--- a/node_modules/graphql-schema-typescript/lib/utils.d.ts.map
+++ b/node_modules/graphql-schema-typescript/lib/utils.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAEA,OAAO,EAKH,aAAa,EACb,kBAAkB,EAClB,kBAAkB,EAClB,uBAAuB,EAC1B,MAAM,SAAS,CAAC;AAKjB;;GAEG;AACH,eAAO,MAAM,gBAAgB,wDAQ5B,CAAC;AAkBF,eAAO,MAAM,4BAA4B,+CAIxC,CAAC;AAEF,MAAM,WAAW,qBAAqB;IAClC,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;CAChB;AACD;;GAEG;AACH,eAAO,MAAM,aAAa,0CAQzB,CAAC;AAEF,MAAM,WAAW,kBAAkB;IAC/B,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,YAAY,CAAC,EAAE,OAAO,CAAC;IACvB,iBAAiB,CAAC,EAAE,MAAM,CAAC;CAC9B;AAED;;GAEG;AACH,eAAO,MAAM,kBAAkB,+CAqB9B,CAAC;AAEF,MAAM,WAAW,SAAS;IACtB,SAAS,EAAE,GAAG,CAAC;IACf,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,EAAE,MAAM,CAAC;IAChB,aAAa,EAAE,MAAM,CAAC;CACzB;AAED,eAAO,MAAM,cAAc,kDAsB1B,CAAC;AAyCF,eAAO,MAAM,cAAc;;;CAiB1B,CAAC;AAEF,eAAO,MAAM,gBAAgB,2BAE5B,CAAC;AAEF,eAAO,MAAM,UAAU,2BAEtB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAEA,OAAO,EAIH,aAAa,EACb,kBAAkB,EAClB,kBAAkB,EAClB,uBAAuB,EAC1B,MAAM,SAAS,CAAC;AAMjB;;GAEG;AACH,eAAO,MAAM,gBAAgB,WAAkB,aAAa,KAAG,OAAO,CAAC,kBAAkB,CAQxF,CAAC;AAkBF,eAAO,MAAM,4BAA4B,SAAgB,MAAM,KAAG,OAAO,CAAC,kBAAkB,CAI3F,CAAC;AAEF,MAAM,WAAW,qBAAqB;IAClC,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;CAChB;AACD;;GAEG;AACH,eAAO,MAAM,aAAa,SAAU,qBAAqB,KAAG,OAQ3D,CAAC;AAEF,MAAM,WAAW,kBAAkB;IAC/B,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,YAAY,CAAC,EAAE,OAAO,CAAC;IACvB,iBAAiB,CAAC,EAAE,MAAM,CAAC;CAC9B;AAED;;GAEG;AACH,eAAO,MAAM,kBAAkB,gBAAiB,kBAAkB,KAAG,MAAM,EAqB1E,CAAC;AAEF,MAAM,WAAW,SAAS;IACtB,SAAS,EAAE,GAAG,CAAC;IACf,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,EAAE,MAAM,CAAC;IAChB,aAAa,EAAE,MAAM,CAAC;CACzB;AAED,eAAO,MAAM,cAAc,UAAW,MAAM,EAAE,aAAa,MAAM,KAAG,MAAM,EAsBzE,CAAC;AAyCF,eAAO,MAAM,cAAc,UAChB,kBAAkB,GAAG,uBAAuB,UAC3C,MAAM,UACN,OAAO;eACH,MAAM;eAAa,MAAM;CAaxC,CAAC;AAEF,eAAO,MAAM,gBAAgB,UAAW,MAAM,KAAG,MAEhD,CAAC;AAEF,eAAO,MAAM,UAAU,UAAW,MAAM,KAAG,MAE1C,CAAC"}
\ No newline at end of file
diff --git a/node_modules/graphql-schema-typescript/lib/utils.js b/node_modules/graphql-schema-typescript/lib/utils.js
index 38e6e07..54c8481 100644
--- a/node_modules/graphql-schema-typescript/lib/utils.js
+++ b/node_modules/graphql-schema-typescript/lib/utils.js
@@ -1,9 +1,10 @@
 "use strict";
 var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
     return new (P || (P = Promise))(function (resolve, reject) {
         function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
         function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
@@ -34,20 +35,28 @@ var __generator = (this && this.__generator) || function (thisArg, body) {
         if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
     }
 };
-var _this = this;
+var __spreadArrays = (this && this.__spreadArrays) || function () {
+    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
+    for (var r = Array(s), k = 0, i = 0; i < il; i++)
+        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
+            r[k] = a[j];
+    return r;
+};
 Object.defineProperty(exports, "__esModule", { value: true });
+exports.pascalCase = exports.toUppercaseFirst = exports.createFieldRef = exports.formatTabSpace = exports.descriptionToJSDoc = exports.isBuiltinType = exports.introspectSchemaViaLocalFile = exports.introspectSchema = void 0;
 var fs = require("fs");
 var path_1 = require("path");
 var graphql_1 = require("graphql");
+var utilities_1 = require("graphql/utilities");
 var lodash_1 = require("lodash");
 /**
  * Send introspection query to a graphql schema
  */
-exports.introspectSchema = function (schema) { return __awaiter(_this, void 0, void 0, function () {
+exports.introspectSchema = function (schema) { return __awaiter(void 0, void 0, void 0, function () {
     var _a, data, errors;
     return __generator(this, function (_b) {
         switch (_b.label) {
-            case 0: return [4 /*yield*/, graphql_1.graphql(schema, graphql_1.introspectionQuery)];
+            case 0: return [4 /*yield*/, graphql_1.graphql(schema, utilities_1.getIntrospectionQuery())];
             case 1:
                 _a = _b.sent(), data = _a.data, errors = _a.errors;
                 if (errors) {
@@ -78,7 +87,7 @@ function klawSync(path, filterRegex, fileNames) {
     }
     return fileNames;
 }
-exports.introspectSchemaViaLocalFile = function (path) { return __awaiter(_this, void 0, void 0, function () {
+exports.introspectSchemaViaLocalFile = function (path) { return __awaiter(void 0, void 0, void 0, function () {
     var files, allTypeDefs;
     return __generator(this, function (_a) {
         switch (_a.label) {
@@ -117,9 +126,9 @@ exports.descriptionToJSDoc = function (description) {
         return [];
     }
     var lines = line.split('\n').map(function (l) { return ' * ' + l; });
-    return [
+    return __spreadArrays([
         '/**'
-    ].concat(lines, [
+    ], lines, [
         ' */'
     ]);
 };
diff --git a/node_modules/graphql-schema-typescript/src/cli.ts b/node_modules/graphql-schema-typescript/src/cli.ts
index abb9d2f..abb3d93 100644
--- a/node_modules/graphql-schema-typescript/src/cli.ts
+++ b/node_modules/graphql-schema-typescript/src/cli.ts
@@ -102,21 +102,21 @@ yargs
             const { folderPath, output } = argv;
 
             const options: GenerateTypescriptOptions = {};
-            options[globalOpt] = argv[globalOpt];
-            options[typePrefix] = argv[typePrefix];
-            options[namespaceOpt] = argv[namespaceOpt];
-            options[miminizeInterface] = argv[miminizeInterface];
-            options[contextType] = argv[contextType];
-            options[importStatements] = argv[importStatements];
-            options[strictNulls] = argv[strictNulls];
-            options[smartTResult] = argv[smartTResult];
-            options[smartTParent] = argv[smartTParent];
-            options[asyncResult] = argv[asyncResult];
-            options[requireResolverTypes] = argv[requireResolverTypes];
-            options[noStringEnum] = argv[noStringEnum];
-            options[optionalResolverInfo] = argv[optionalResolverInfo];
+            options[globalOpt] = argv[globalOpt] as boolean;
+            options[typePrefix] = argv[typePrefix] as string;
+            options[namespaceOpt] = argv[namespaceOpt] as string;
+            options[miminizeInterface] = argv[miminizeInterface] as boolean;
+            options[contextType] = argv[contextType] as string;
+            options[importStatements] = argv[importStatements] as string[];
+            options[strictNulls] = argv[strictNulls] as boolean;
+            options[smartTResult] = argv[smartTResult] as boolean;
+            options[smartTParent] = argv[smartTParent] as boolean;
+            options[asyncResult] = argv[asyncResult] as boolean;
+            options[requireResolverTypes] = argv[requireResolverTypes] as boolean;
+            options[noStringEnum] = argv[noStringEnum] as boolean;
+            options[optionalResolverInfo] = argv[optionalResolverInfo] as boolean;
 
-            await generateTypeScriptTypes(folderPath, path.resolve(output), options);
+            await generateTypeScriptTypes(folderPath as string, path.resolve(output as string), options);
             if (process.env.NODE_ENV !== 'test') {
                 console.log(`Typescript generated at: ${output}`);
             }
diff --git a/node_modules/graphql-schema-typescript/src/index.ts b/node_modules/graphql-schema-typescript/src/index.ts
index b310278..9319abc 100644
--- a/node_modules/graphql-schema-typescript/src/index.ts
+++ b/node_modules/graphql-schema-typescript/src/index.ts
@@ -6,7 +6,7 @@ import { TSResolverGenerator, GenerateResolversResult } from './typescriptResolv
 import { TypeScriptGenerator } from './typescriptGenerator';
 import { formatTabSpace, introspectSchema, introspectSchemaViaLocalFile } from './utils';
 import { isString } from 'util';
-import { IntrospectionQuery } from 'graphql/utilities/introspectionQuery';
+import { IntrospectionQuery } from 'graphql';
 
 export { GenerateTypescriptOptions } from './types';
 
diff --git a/node_modules/graphql-schema-typescript/src/typescriptGenerator.ts b/node_modules/graphql-schema-typescript/src/typescriptGenerator.ts
index c7a6892..ecc5cf3 100644
--- a/node_modules/graphql-schema-typescript/src/typescriptGenerator.ts
+++ b/node_modules/graphql-schema-typescript/src/typescriptGenerator.ts
@@ -146,7 +146,7 @@ export class TypeScriptGenerator {
         objectType: IntrospectionObjectType | IntrospectionInputObjectType | IntrospectionInterfaceType,
         allGQLTypes: IntrospectionType[]
     ): string[] {
-        const fields: (IntrospectionInputValue | IntrospectionField)[]
+        const fields: readonly (IntrospectionInputValue | IntrospectionField)[]
             = objectType.kind === 'INPUT_OBJECT' ? objectType.inputFields : objectType.fields;
 
         const extendTypes: string[] = objectType.kind === 'OBJECT'
diff --git a/node_modules/graphql-schema-typescript/src/utils.ts b/node_modules/graphql-schema-typescript/src/utils.ts
index 6ef3d4c..54748be 100644
--- a/node_modules/graphql-schema-typescript/src/utils.ts
+++ b/node_modules/graphql-schema-typescript/src/utils.ts
@@ -4,12 +4,12 @@ import {
     graphql,
     buildASTSchema,
     parse,
-    introspectionQuery,
     GraphQLSchema,
     IntrospectionQuery,
     IntrospectionField,
-    IntrospectionInputValue
+    IntrospectionInputValue,
 } from 'graphql';
+import { getIntrospectionQuery } from 'graphql/utilities';
 import {
     camelCase
 } from 'lodash';
@@ -18,7 +18,7 @@ import {
  * Send introspection query to a graphql schema
  */
 export const introspectSchema = async (schema: GraphQLSchema): Promise<IntrospectionQuery> => {
-    const { data, errors } = await graphql(schema, introspectionQuery);
+    const { data, errors } = await graphql(schema, getIntrospectionQuery());
 
     if (errors) {
         throw errors;
