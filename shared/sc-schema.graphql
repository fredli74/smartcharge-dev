# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  id: ID!
  name: String!
  token: String!
}

type Action {
  action: String!
  actionID: Int!
  data: JSONObject!
  providerName: String!
  serviceID: ID!
}

enum ChargeConnection {
  AC
  DC
}

type ChargePlan {
  """time to start or null for now"""
  chargeStart: DateTime

  """time to end or null for never"""
  chargeStop: DateTime
  chargeType: ChargeType!
  comment: String!
  level: Int!
}

enum ChargeType {
  Calibrate
  Disable
  Fill
  Manual
  Minimum
  Prefered
  Routine
  Trip
}

type ChartData {
  batteryLevel: Int!
  chargeCurve: JSONObject!
  chargePlan: [ChargePlan!]
  directLevel: Int!
  eventList: [EventList!]!
  locationID: ID
  maximumLevel: Int!
  prices: [PriceData!]
  stateMap: [StateMap!]!
  thresholdPrice: Float
  vehicleID: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type EventList {
  data: JSONObject
  end: DateTime!
  eventType: EventType!
  start: DateTime!
}

enum EventType {
  Charge
  Sleep
  Trip
}

type GeoLocation {
  latitude: Float!
  longitude: Float!
}

input GeoLocationInput {
  latitude: Float!
  longitude: Float!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Location {
  """Radius in meters"""
  geoFenceRadius: Int
  geoLocation: GeoLocation!
  id: ID!
  name: String!
  ownerID: ID!
  priceList: PriceList
  priceListID: String
  providerData: JSONObject
  serviceID: ID
}

type Mutation {
  _chargeCalibration(
    """duration (seconds)"""
    duration: Int
    level: Int

    """current power use (kW)"""
    powerUse: Float
    vehicleID: ID!
  ): Int
  _updatePrice(input: UpdatePriceInput!): Boolean!
  _updateVehicleData(input: UpdateVehicleDataInput!): Boolean!
  _vehicleDebug(input: VehicleDebugInput!): Boolean!
  loginWithIDToken(idToken: String!): Account!
  loginWithPassword(password: String!): Account!
  newPriceList(id: ID, isPublic: Boolean = false, name: String!): PriceList!
  performAction(action: String!, actionID: Int, data: JSONObject, serviceID: ID!): JSONObject!
  providerMutate(
    input: JSONObject!

    """Provider name"""
    name: String!
  ): JSONObject!
  removeLocation(confirm: String!, id: ID!): Boolean!
  removeSchedule(id: Int!, vehicleID: ID!): Boolean!
  removeVehicle(confirm: String!, id: ID!): Boolean!
  updateLocation(input: UpdateLocationInput!): Location!
  updatePriceList(input: UpdatePriceListInput!): PriceList!
  updateSchedule(id: Int, level: Int, time: DateTime, type: ScheduleType!, vehicleID: ID!): [Schedule!]!
  updateVehicle(input: UpdateVehicleInput!): Vehicle!
}

type PriceData {
  """Price in currency per kWh (5 decimal precision)"""
  price: Float!

  """Price tariff start time"""
  startAt: DateTime!
}

input PriceDataInput {
  """Price in currency per kWh (5 decimal precision)"""
  price: Float!

  """Price tariff start time"""
  startAt: DateTime!
}

type PriceList {
  id: ID!
  isPublic: Boolean!
  name: String!
  ownerID: ID!
}

type Query {
  _serviceProviders(accept: [String!]!): [ServiceProvider!]!
  account: Account!
  chartData(from: DateTime!, locationID: String, period: Int = 60, vehicleID: String!): ChartData!
  location(id: String!): Location!
  locations: [Location!]!
  priceList(id: String!): PriceList!
  priceLists: [PriceList!]!
  providerQuery(
    input: JSONObject!

    """Provider name"""
    name: String!
  ): JSONObject!
  test: ResolverTest!
  vehicle(id: String!): Vehicle!
  vehicleLimit: Int
  vehicles: [Vehicle!]!
}

type ResolverTest {
  isFieldResolverWorking: Boolean!
}

type Schedule {
  id: Int!
  level: Int
  time: DateTime
  type: ScheduleType!
  vehicleID: ID!
}

enum ScheduleType {
  AI
  Disable
  Manual
  Suggestion
  Trip
}

type ServiceProvider {
  ownerID: ID!
  providerName: String!
  serviceData: JSONObject!
  serviceID: ID!
}

type StateMap {
  chargeCost: Float!
  chargeCostSaved: Float!
  chargedEnergy: Float!
  chargedSeconds: Int!
  drivenMeters: Int!
  drivenSeconds: Int!
  maximumLevel: Int!
  minimumLevel: Int!
  period: Int!
  start: DateTime!
}

type Subscription {
  actionSubscription(providerName: String, serviceID: ID): Action!
  pingSubscription: Int!
  vehicleSubscription(id: String!): Vehicle!
}

input UpdateLocationInput {
  """Radius in meters"""
  geoFenceRadius: Int
  geoLocation: GeoLocationInput
  id: ID!
  name: String
  priceListID: ID
  providerData: JSONObject
  serviceID: ID
}

input UpdatePriceInput {
  priceListID: ID!
  prices: [PriceDataInput!]!
}

input UpdatePriceListInput {
  id: ID!
  isPublic: Boolean!
  name: String!
}

input UpdateVehicleDataInput {
  """battery level (%)"""
  batteryLevel: Int!

  """charging to level (%)"""
  chargingTo: Int

  """is climate control on"""
  climateControl: Boolean!

  """charge connection"""
  connectedCharger: ChargeConnection

  """charge added (kWh)"""
  energyAdded: Float

  """estimated time to complete charge (minutes)"""
  estimatedTimeLeft: Int
  geoLocation: GeoLocationInput!
  id: ID!

  """inside temperature (celcius)"""
  insideTemperature: Float
  isDriving: Boolean!

  """odometer (meters)"""
  odometer: Int!

  """outside temperature (celcius)"""
  outsideTemperature: Float

  """current power use (kW)"""
  powerUse: Float
}

input UpdateVehicleInput {
  id: ID!
  locationSettings: [VehicleLocationSettingInput!]
  maximumLevel: Int
  name: String
  providerData: JSONObject
  serviceID: ID
  status: String
}

type Vehicle {
  """battery level (%)"""
  batteryLevel: Int!

  """charge plan"""
  chargePlan: [ChargePlan!]

  """charging to level (%)"""
  chargingTo: Int

  """is climate control on"""
  climateControl: Boolean!

  """estimated time to complete charge (minutes)"""
  estimatedTimeLeft: Int
  geoLocation: GeoLocation
  id: ID!

  """inside temperature (celcius)"""
  insideTemperature: Float!

  """is a charger connected"""
  isConnected: Boolean!
  isDriving: Boolean!

  """known location"""
  location: Location

  """known location id"""
  locationID: ID

  """location settings"""
  locationSettings: [VehicleLocationSetting!]!

  """maximum level to charge to unless a trip is scheduled (%)"""
  maximumLevel: Int!
  name: String!

  """odometer (meters)"""
  odometer: Int!

  """outside temperature (celcius)"""
  outsideTemperature: Float!
  ownerID: ID!
  providerData: JSONObject!

  """schedule"""
  schedule: [Schedule!]!
  serviceID: ID
  smartStatus: String!
  status: String!
  updated: DateTime!
}

input VehicleDebugInput {
  category: String!
  data: JSONObject!
  id: ID!
  timestamp: DateTime!
}

type VehicleLocationSetting {
  """Minimum battery level to reach directly (%)"""
  directLevel: Int!
  goal: String!

  """location id"""
  locationID: ID!
}

input VehicleLocationSettingInput {
  """Minimum battery level to reach directly (%)"""
  directLevel: Int!
  goal: String!

  """location id"""
  locationID: ID!
}
