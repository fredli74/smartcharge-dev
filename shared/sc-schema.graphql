# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  id: ID!
  name: String!
  token: String!
}

type Action {
  actionID: Int!
  serviceID: ID!
  providerName: String!
  action: String!
  data: JSONObject!
}

enum ChargeConnection {
  AC
  DC
}

type ChargePlan {
  chargeType: ChargeType!

  """time to start or null for now"""
  chargeStart: DateTime

  """time to end or null for never"""
  chargeStop: DateTime
  level: Int!
  comment: String!
}

enum ChargeType {
  Calibrate
  Minimum
  Trip
  Routine
  Prefered
  Fill
}

type ChartData {
  locationID: ID!
  locationName: String!
  vehicleID: ID!
  batteryLevel: Int!
  levelChargeTime: Int
  thresholdPrice: Int
  chargeCurve: JSONObject!
  prices: [PriceData!]!
  chargePlan: [ChargePlan!]
  directLevel: Int!
  maximumLevel: Int!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type GeoLocation {
  latitude: Float!
  longitude: Float!
}

input GeoLocationInput {
  latitude: Float!
  longitude: Float!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Location {
  id: ID!
  ownerID: ID!
  name: String!
  geoLocation: GeoLocation!

  """Radius in meters"""
  geoFenceRadius: Int
  serviceID: ID
  providerData: JSONObject
  priceList: PriceList
}

type Mutation {
  loginWithPassword(password: String!): Account!
  loginWithIDToken(idToken: String!): Account!
  updatePriceList(input: UpdatePriceListInput!): PriceList!
  updateLocation(input: UpdateLocationInput!): Location!
  removeLocation(confirm: String!, id: String!): Boolean!
  providerMutate(
    input: JSONObject!

    """Provider name"""
    name: String!
  ): JSONObject!
  performAction(data: JSONObject, action: String!, serviceID: ID!, actionID: Int): JSONObject!
  _updateVehicleData(input: UpdateVehicleDataInput!): Boolean!
  _vehicleDebug(input: VehicleDebugInput!): Boolean!
  _chargeCalibration(
    """current power use (kW)"""
    powerUse: Float

    """duration (seconds)"""
    duration: Int
    level: Int
    vehicleID: ID!
  ): Int
  _updatePrice(input: UpdatePriceInput!): Boolean!
  removeVehicle(confirm: String!, id: String!): Boolean!
  updateVehicle(input: UpdateVehicleInput!): Vehicle!
}

type PriceData {
  """Price tariff start time"""
  startAt: DateTime!

  """Price in currency per kWh (5 decimal precision)"""
  price: Float!
}

input PriceDataInput {
  """Price tariff start time"""
  startAt: DateTime!

  """Price in currency per kWh (5 decimal precision)"""
  price: Float!
}

type PriceList {
  id: ID!
  ownerID: ID!
  name: String!
  isPrivate: Boolean!
}

type Query {
  account: Account!
  priceLists: [PriceList!]!
  priceList(id: String!): PriceList!
  locations: [Location!]!
  location(id: String!): Location!
  providerQuery(
    input: JSONObject!

    """Provider name"""
    name: String!
  ): JSONObject!
  _serviceProviders(accept: [String!]!): [ServiceProvider!]!
  chartData(locationID: String!, vehicleID: String!): ChartData!
  vehicles: [Vehicle!]!
  vehicle(id: String!): Vehicle!
  test: ResolverTest!
}

type ResolverTest {
  isFieldResolverWorking: Boolean!
}

enum SchduleType {
  Guide
  Manual
  Pause
  Trip
}

type Schedule {
  type: SchduleType!

  """Battery level to reach at scheduled time (%)"""
  level: Int!
  time: DateTime!
}

input ScheduleInput {
  type: SchduleType!

  """Battery level to reach at scheduled time (%)"""
  level: Int!
  time: DateTime!
}

type ServiceProvider {
  ownerID: ID!
  providerName: String!
  serviceID: ID!
  serviceData: JSONObject!
}

type Subscription {
  pingSubscription: Int!
  actionSubscription(serviceID: ID, providerName: String): Action!
  vehicleSubscription(id: String!): Vehicle!
}

input UpdateLocationInput {
  id: ID!
  name: String
  geoLocation: GeoLocationInput

  """Radius in meters"""
  geoFenceRadius: Int
  priceListID: ID
  serviceID: ID
  providerData: JSONObject
}

input UpdatePriceInput {
  priceListID: ID!
  prices: [PriceDataInput!]!
}

input UpdatePriceListInput {
  id: ID!
  name: String!
  isPrivate: Boolean!
}

input UpdateVehicleDataInput {
  id: ID!
  geoLocation: String!

  """battery level (%)"""
  batteryLevel: Int!

  """odometer (meters)"""
  odometer: Int!

  """outside temperature (celcius)"""
  outsideTemperature: Float

  """inside temperature (celcius)"""
  insideTemperature: Float

  """is climate control on"""
  climateControl: Boolean!
  isDriving: Boolean!

  """charge connection"""
  connectedCharger: ChargeConnection

  """charging to level (%)"""
  chargingTo: Int

  """estimated time to complete charge (minutes)"""
  estimatedTimeLeft: Int

  """current power use (kW)"""
  powerUse: Float

  """charge added (kWh)"""
  energyAdded: Float
}

input UpdateVehicleInput {
  id: ID!
  name: String
  maximumLevel: Int
  schedule: ScheduleInput
  locationSettings: [VehicleLocationSettingInput!]
  status: String
  serviceID: ID
  providerData: JSONObject
}

type Vehicle {
  id: ID!
  ownerID: ID!
  serviceID: ID
  name: String!

  """maximum level to charge to unless a trip is scheduled (%)"""
  maximumLevel: Int!

  """schedule"""
  schedule: [Schedule!]!
  providerData: JSONObject!
  geoLocation: GeoLocation

  """known location id"""
  locationID: ID

  """known location"""
  location: Location

  """location settings"""
  locationSettings: [VehicleLocationSetting!]

  """battery level (%)"""
  batteryLevel: Int!

  """odometer (meters)"""
  odometer: Int!

  """outside temperature (celcius)"""
  outsideTemperature: Float!

  """inside temperature (celcius)"""
  insideTemperature: Float!

  """is climate control on"""
  climateControl: Boolean!

  """is a charger connected"""
  isConnected: Boolean!

  """charging to level (%)"""
  chargingTo: Int

  """estimated time to complete charge (minutes)"""
  estimatedTimeLeft: Int
  isDriving: Boolean!
  status: String!
  smartStatus: String!

  """charge plan"""
  chargePlan: [ChargePlan!]
  updated: DateTime!
}

input VehicleDebugInput {
  id: ID!
  timestamp: DateTime!
  category: String!
  data: JSONObject!
}

type VehicleLocationSetting {
  """location id"""
  locationID: ID!

  """Minimum battery level to reach directly (%)"""
  directLevel: Int!
  goal: String!
}

input VehicleLocationSettingInput {
  """location id"""
  locationID: ID!

  """Minimum battery level to reach directly (%)"""
  directLevel: Int!
  goal: String!
}
